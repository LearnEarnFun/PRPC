

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.14
 * Generated at: 2019-06-27 19:43:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.diagnostic;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.pega.pegarules.api.util.StatusConstants;
import com.pega.pegarules.api.util.FilterUtils;

public final class status_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.pega.pegarules.api.util.StatusConstants");
    _jspx_imports_classes.add("com.pega.pegarules.api.util.FilterUtils");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	String sStatus = (String)request.getAttribute(StatusConstants.ERROR_INFORMATION_STATUS);
	String sMessage = (String)request.getAttribute(StatusConstants.ERROR_INFORMATION_MESSAGE);
	sMessage = FilterUtils.crossScriptingFilter(sMessage);
	String sUserName = (String)request.getAttribute(StatusConstants.ERROR_INFORMATION_USERNAME);
	String sRequestorID = (String)request.getAttribute(StatusConstants.ERROR_INFORMATION_REQUESTOR_ID);
	String sETierVersion = (String)request.getAttribute(StatusConstants.ERROR_INFORMATION_ETIER_VERSION_STRING);
	List lstExceptions = (List)request.getAttribute(StatusConstants.ERROR_INFORMATION_EXCEPTIONS);	
	
	boolean bIsNoContent = false;
	if(request.getAttribute(StatusConstants.ERROR_INFORMATION_NO_OUTPUT)!=null)
		bIsNoContent = ((Boolean)request.getAttribute (StatusConstants.ERROR_INFORMATION_NO_OUTPUT)).booleanValue();
	// Bug-187754(Pega-RULES cookie is set twice in error cases)
	/*boolean bSecureCookie = false;
	if(request.getAttribute(StatusConstants.ERROR_INFORMATION_SECURE_COOKIE) != null)
		bSecureCookie = ((Boolean)request.getAttribute(StatusConstants.ERROR_INFORMATION_SECURE_COOKIE)).booleanValue();*/
	
	
	// clear exceptions - otherwise some app servers will cache and prevent garbage collection at shutdown
	request.setAttribute(StatusConstants.ERROR_INFORMATION_EXCEPTIONS, null);
	
	if (bIsNoContent) {
		sStatus = "good";
		sMessage = "The operation completed successfully, but returned no content";	
	} else {
		response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	}
	response.setHeader("Cache-Control", "max-age=0");
	if (sUserName == null)
		sUserName = "Unauthenticated or not available";
		
	if (sRequestorID == null) {
		sRequestorID = "No ID available";
	}
    	if (sStatus == null) {
    	    sStatus = "Fail";
        } 
	if (sETierVersion == null) {
    	    sETierVersion = "";
        }
    	if (sMessage == null) {
    	    sMessage = "An error has occurred";
        }

      out.write("<!doctype html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Pega Platform - Status</title>\n");
      out.write("<style>\n");
      out.write("    body {\n");
      out.write("      background:linear-gradient(-150deg,#125876 0%,#1F2555 20%);\n");
      out.write("      background-repeat: no-repeat;\n");
      out.write("      background-color: rgb(31,37,85);\n");
      out.write("      padding: 0 7px;\n");
      out.write("      text-align: center;\n");
      out.write("    }\n");
      out.write("    .stacktrace,\n");
      out.write("    body {\n");
      out.write("      font: 14px/19px sans-serif;\n");
      out.write("      font-weight: 400;\n");
      out.write("      font-style: normal; \n");
      out.write("      color:#ddd;\n");
      out.write("    }\n");
      out.write("    svg {\n");
      out.write("      width:280px;\n");
      out.write("      padding-top:112px;\n");
      out.write("    }\n");
      out.write("    .message {\n");
      out.write("      max-width:440px;\n");
      out.write("      text-align: center;\n");
      out.write("      margin: 7px auto;\n");
      out.write("      font-size:16px;\n");
      out.write("    }\n");
      out.write("    .info {\n");
      out.write("      color:#95989A;\n");
      out.write("      max-width: 440px;\n");
      out.write("      margin: 14px auto;\n");
      out.write("    }\n");
      out.write("    .details {\n");
      out.write("      max-width: 440px;\n");
      out.write("      text-align:left;\n");
      out.write("      margin: 14px auto;\n");
      out.write("    }\n");
      out.write("    .details > div > label{\n");
      out.write("      font-weight:700;\n");
      out.write("      padding-right:7px;\n");
      out.write("    } \n");
      out.write("    .stacktrace {\n");
      out.write("      text-align: left;\n");
      out.write("      max-width: 1300px;\n");
      out.write("      margin: 7px auto;\n");
      out.write("      word-break:break-all\n");
      out.write("    }  \n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 311 68\"><title>Pega with flying horse logo</title><path fill=\"#fff\" d=\"M78.42 9.8a45 45 0 0 0-.7 18.31c-1.6-.32-3.24-.63-4.92-.9C37.73 21.5 27.15 38.79 31.24 52.8A235 235 0 0 0 0 67.05C13.77 34 43.68 5 68.93 1.16 77.18.07 79.49 5.42 78.42 9.8zm73.81 26.48S150.7 39 150 40s-2.84 1.66-4.71.77c-.85-.41-8.82-5.06-11.87-4.79-15.44 1.35-19.65-5-20.14-5.59s-1.43-.31-.76.82c3.38 5.81 13.41 8.51 13.41 8.51a38 38 0 0 1 2.93 10.74 45.26 45.26 0 0 0-8.37-5.15A116.37 116.37 0 0 0 83 29.27C84 15.69 90.83-3.95 122.88.7c0 0 6.43 1.05 10.71 4 0 0-1 1.08-2.38 2.44a1.29 1.29 0 0 0 .14 2.21l6.77 5.32c.08 2.82.2 3.6 2.32 6.15S150.79 32 151.87 33.15a2.94 2.94 0 0 1 .36 3.13zM136.15 17l-.15-.1a3.55 3.55 0 0 0-3.93.8l-.22.24 3.51 1.72z\"/><path fill=\"#009C9D\" d=\"M81.31 40.15C66 41.61 47.89 46.55 31.24 52.81c-4.09-14 6.49-31.31 41.56-25.6 1.68.27 3.32.58 4.92.9a55.47 55.47 0 0 0 3.59 12.04zm2-.17c13.66-1.08 26.56.29 37.22 5.36A116.37 116.37 0 0 0 83 29.27 54.81 54.81 0 0 0 83.28 40z\"/><path fill=\"#fff\" d=\"M210.12 35.49h15.51v-7h-15.51v-7.56h19.29v-7h-27.16v36h27.41v-7h-19.54zm29.43-17.58a18.66 18.66 0 0 0-5.69 13.88 18.5 18.5 0 0 0 5.59 13.77A19.09 19.09 0 0 0 253.29 51c6.49 0 11.56-2 15.08-5.84l.18-.2V28.45H252.9v6.68h8.16v6.75a15.14 15.14 0 0 1-7.85 1.9 11.4 11.4 0 0 1-11.61-12 11.57 11.57 0 0 1 3.49-8.74 12.12 12.12 0 0 1 8.66-3.33 15.44 15.44 0 0 1 4.75.66 11.86 11.86 0 0 1 3.8 2.2l4.38-5.53c-2.31-2-6.47-4.71-13.39-4.71a19 19 0 0 0-13.74 5.58zm-56.88-4H168v36h7.92V39.09h6c8.08 0 14.56-4.32 14.56-12.65v-.11c-.02-7.33-5.21-12.44-13.81-12.44zm5.76 12.7c0 3.09-2.31 5.45-6.27 5.45h-6.27V21H182c4 0 6.42 1.9 6.42 5.45zm115.48-11.16h.38a.78.78 0 0 1 .49.12.44.44 0 0 1 .16.39.5.5 0 0 1-.17.38.71.71 0 0 1-.47.14h-.39zm.47-1.56a2.7 2.7 0 1 0 2.7 2.7 2.7 2.7 0 0 0-2.7-2.7zm2.33 2.7a2.33 2.33 0 1 1-2.33-2.33 2.33 2.33 0 0 1 2.33 2.33zm-2.8 1.55v-1.21h.49l.71 1.21h.6l-.82-1.36a.85.85 0 0 0 .43-.33.91.91 0 0 0 .16-.51.88.88 0 0 0-.28-.71 1.34 1.34 0 0 0-.88-.24h-.94v3.15zm-16.27-4.25l-15.32 36h8l3.26-8h15.12l3.27 8h8.22l-15.32-36zm-1.22 21l4.74-11.59 4.75 11.59z\"/></svg>\n");
      out.write("    <div class='info'>");
      out.print( new Date(System.currentTimeMillis()) );
      out.write('.');
      out.write(' ');
      out.print( sETierVersion );
      out.write("</div>\n");
      out.write("    <div class='message'>");
      out.print( sMessage );
      out.write("</div>\n");
      out.write("    <div class='details'>\n");
      out.write("        <div><label>Status:</label>");
      out.print( sStatus );
      out.write("</div>\n");
      out.write("        <div><label>Operator:</label>");
      out.print( sUserName );
      out.write("</div>\n");
      out.write("        <div><label>Node:</label>");
      out.print( sRequestorID );
      out.write("</div>\n");
      out.write("   </div>\n");
      out.write("    <pre class='stacktrace'>");

if (lstExceptions != null) {
    for (int i = 0; i < lstExceptions.size(); i++) {
        Object oCheck = lstExceptions.get(i);
        if (oCheck != null && oCheck instanceof Throwable) {
            try {
                Stack causationStack = new Stack();
                Throwable curEx = (Throwable)oCheck;
                causationStack.push(curEx);
                while (true) {
                        curEx = curEx.getCause();
                        if (curEx == null) {
                                break;
                        } else {
                                causationStack.push(curEx);
                        }
                }
                while (!causationStack.empty()) {
                        curEx = (Throwable)causationStack.pop();
                        StackTraceElement[] stack = curEx.getStackTrace();
                        out.print(FilterUtils.crossScriptingFilter(curEx.toString()));
                        out.print("\n");
                        for (int j=0; j<stack.length; j++) {
                                out.print(stack[j].toString());
                                out.print("\n");
                        }
                }
            } catch (Throwable thr) {}
        }
    }
}

      out.write("</pre>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
